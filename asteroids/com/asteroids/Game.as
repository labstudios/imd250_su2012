package com.asteroids{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	public class Game extends Sprite	{		public static const TOP:Number = 0;		public static const BOTTOM:Number = 400;		public static const LEFT:Number = 0;		public static const RIGHT:Number = 550;		private static var _game:Game;		private var up:Boolean = false;		private var down:Boolean = false;		private var left:Boolean = false;		private var right:Boolean = false;		private var space:Boolean = false;		private var _ship:Ship;		private var bullets:Vector.<Bullet> = new Vector.<Bullet>();				public function Game()		{			_game = this;			this.addEventListener(Event.ADDED_TO_STAGE, this.init);			this.focusRect = false;		}				private function init(e:* = null):void		{			this.addEventListener(Event.ENTER_FRAME, this.run);			this.stage.focus = this;			this.addEventListener(KeyboardEvent.KEY_DOWN, this.keyDown);			this.addEventListener(KeyboardEvent.KEY_UP, this.keyUp);		}				private function run(e:* = null):void		{				if(this.up)				{					this.ship.thrust();				}				if(this.down)				{					trace("down");				}				if(this.left)				{					this.ship.rotateLeft();				}				if(this.right)				{					this.ship.rotateRight();				}				if(this.space)				{					var bullet:Bullet = this.ship.fire();					this.addChild(bullet);					this.bullets.push(bullet);				}				this.ship.run();				for(var i:int = 0; i < this.bullets.length;++i)				{					this.bullets[i].run();				}		}				private function keyDown(e:KeyboardEvent):void		{			switch(e.keyCode)			{				case Keyboard.UP:					this.up = true;				break;				case Keyboard.DOWN:					this.down = true;				break;				case Keyboard.LEFT:					this.left = true;				break;				case Keyboard.RIGHT:					this.right = true;				break;				case Keyboard.SPACE:					this.space = true;				break;				default:					//ignore this key				break;			}		}				private function keyUp(e:KeyboardEvent):void		{			switch(e.keyCode)			{				case Keyboard.UP:					this.up = false;				break;				case Keyboard.DOWN:					this.down = false;				break;				case Keyboard.LEFT:					this.left = false;				break;				case Keyboard.RIGHT:					this.right = false;				break;				case Keyboard.SPACE:					this.space = false;				break;				default:					//ignore this key				break;			}		}				public function removeBullet(b:Bullet):void		{			for(var i:int = 0; i < this.bullets.length;++i)			{				if(this.bullets[i] == b)				{					this.bullets.splice(i, 1);					break;				}			}			this.removeChild(b);		}				public function get ship():Ship		{			return this._ship;		}				public function set ship(s:Ship):void		{			this._ship = s;		}				public static function get instance():Game		{			return _game		}	}}